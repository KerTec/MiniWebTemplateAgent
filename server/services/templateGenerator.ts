import JSZip from 'jszip';
import { ProjectConfig } from '@shared/schema';
import { generateFormComponentTemplates, generateFormComponentsCSS, generateFormComponentsJS } from './formComponentTemplates';
import { generateUIComponentTemplates, generateUIComponentsCSS, generateUIComponentsJS } from './uiComponentTemplates';
import { generateBusinessComponentTemplates, generateBusinessComponentsCSS, generateBusinessComponentsJS } from './businessComponentTemplates';
import { getBusinessLogicTemplates } from './businessLogicTemplates';

export async function generateProject(config: ProjectConfig): Promise<Buffer> {
  const zip = new JSZip();
  
  // Generate HTML
  const htmlContent = generateHTML(config);
  zip.file('index.html', htmlContent);
  
  // Generate CSS
  const cssContent = generateCSS(config);
  zip.file('style.css', cssContent);
  
  // Generate JavaScript
  const jsContent = generateJavaScript(config);
  zip.file('script.js', jsContent);
  
  // Generate README
  const readmeContent = generateREADME(config);
  zip.file('README.md', readmeContent);
  
  return await zip.generateAsync({ type: 'nodebuffer' });
}

function generateHTML(config: ProjectConfig): string {
  const { structure } = config;
  
  // CSS Framework CDN links
  let cssFrameworkLink = '';
  if (config.cssFramework === 'bulma') {
    cssFrameworkLink = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">';
  } else if (config.cssFramework === 'pico') {
    cssFrameworkLink = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">';
  }
  
  let bodyContent = '';
  
  if (structure.header) {
    bodyContent += `
    <header class="app-header">
        <div class="container">
            <h1>${config.name || 'Mon Mini-Outil'}</h1>
            ${config.description ? `<p class="description">${config.description}</p>` : ''}
        </div>
    </header>`;
  }
  
  if (structure.nav) {
    bodyContent += `
    <nav class="app-nav">
        <div class="container">
            <ul class="nav-menu">
                <li><a href="#home" class="nav-link active">Accueil</a></li>
                <li><a href="#about" class="nav-link">À propos</a></li>
                <li><a href="#contact" class="nav-link">Contact</a></li>
            </ul>
        </div>
    </nav>`;
  }
  
  let mainContent = '';
  
  // Add form components
  if (Object.values(config.formComponents).some(Boolean)) {
    mainContent += generateFormComponentTemplates(config);
  }
  
  // Add business components
  if (Object.values(config.businessComponents).some(Boolean)) {
    mainContent += generateBusinessComponentTemplates(config);
  }
  
  // Add UI components
  if (Object.values(config.uiComponents).some(Boolean)) {
    mainContent += generateUIComponentTemplates(config);
  }
  
  const mainSection = `
    <main class="app-main">
        <div class="container">
            ${mainContent || '<h2>Contenu principal</h2><p>Votre contenu ici...</p>'}
        </div>
    </main>`;
  
  if (structure.sidebar) {
    bodyContent += `
    <div class="app-layout">
        <aside class="app-sidebar">
            <div class="sidebar-content">
                <h3>Menu</h3>
                <ul class="sidebar-menu">
                    <li><a href="#section1">Section 1</a></li>
                    <li><a href="#section2">Section 2</a></li>
                    <li><a href="#section3">Section 3</a></li>
                </ul>
            </div>
        </aside>
        ${mainSection}
    </div>`;
  } else {
    bodyContent += mainSection;
  }
  
  if (structure.footer) {
    bodyContent += `
    <footer class="app-footer">
        <div class="container">
            <p>&copy; 2025 ${config.name || 'Mon Mini-Outil'}. ${config.author ? `Créé par ${config.author}.` : ''}</p>
        </div>
    </footer>`;
  }

  return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${config.name || 'Mon Mini-Outil'}</title>
    <meta name="description" content="${config.description || 'Application web générée par Agent Template'}">
    ${cssFrameworkLink}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="style.css">
</head>
<body>
    ${bodyContent}
    <script src="script.js"></script>
</body>
</html>`;
}

function generateCSS(config: ProjectConfig): string {
  let css = `/* Generated by Agent Template */
/* Variables CSS */
:root {
    --primary-color: hsl(207, 90%, 54%);
    --secondary-color: hsl(25, 5.3%, 44.7%);
    --background-color: hsl(0, 0%, 100%);
    --surface-color: hsl(60, 4.8%, 95.9%);
    --text-color: hsl(20, 14.3%, 4.1%);
    --border-color: hsl(20, 5.9%, 90%);
    --destructive: hsl(0, 84.2%, 60.2%);
    --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    --radius: 8px;
    --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Reset et base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--font-family);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--background-color);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

/* Layout Components */
.app-header {
    background-color: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    padding: 1rem 0;
}

.app-header h1 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--primary-color);
}

.app-header .description {
    color: var(--secondary-color);
    margin-top: 0.25rem;
}

.app-nav {
    background-color: var(--background-color);
    border-bottom: 1px solid var(--border-color);
    padding: 0.5rem 0;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-link {
    text-decoration: none;
    color: var(--secondary-color);
    padding: 0.5rem 0;
    transition: color 0.2s;
}

.nav-link:hover,
.nav-link.active {
    color: var(--primary-color);
}

.app-main {
    min-height: 60vh;
    padding: 2rem 0;
}

.app-layout {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: 2rem;
    min-height: 60vh;
}

.app-sidebar {
    background-color: var(--surface-color);
    border-radius: var(--radius);
    padding: 1.5rem;
}

.sidebar-menu {
    list-style: none;
}

.sidebar-menu a {
    display: block;
    padding: 0.5rem 0;
    text-decoration: none;
    color: var(--secondary-color);
    transition: color 0.2s;
}

.sidebar-menu a:hover {
    color: var(--primary-color);
}

.app-footer {
    background-color: var(--surface-color);
    border-top: 1px solid var(--border-color);
    padding: 1.5rem 0;
    text-align: center;
    color: var(--secondary-color);
    font-size: 0.875rem;
}

/* Utility Classes */
.btn {
    display: inline-block;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    text-decoration: none;
    transition: all 0.2s;
    font-family: inherit;
    font-size: 0.875rem;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background-color: hsl(207, 90%, 48%);
}

.btn-secondary {
    background-color: var(--surface-color);
    color: var(--text-color);
    border: 1px solid var(--border-color);
}

.btn-secondary:hover {
    background-color: hsl(60, 4.8%, 92%);
}

.btn-success {
    background-color: hsl(142, 76%, 36%);
    color: white;
}

.btn-success:hover {
    background-color: hsl(142, 76%, 32%);
}

.btn-danger {
    background-color: var(--destructive);
    color: white;
}

.btn-danger:hover {
    background-color: hsl(0, 84.2%, 55%);
}

.card {
    background-color: var(--background-color);
    border: 1px solid var(--border-color);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 2rem;
}

.form-group {
    margin-bottom: 1rem;
}

.form-label {
    display: block;
    margin-bottom: 0.25rem;
    font-weight: 500;
    color: var(--text-color);
}

.form-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius);
    font-family: inherit;
    transition: border-color 0.2s;
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.table {
    width: 100%;
    border-collapse: collapse;
    background-color: var(--background-color);
}

.table th,
.table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.table th {
    background-color: var(--surface-color);
    font-weight: 600;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
}

.modal.active {
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background-color: var(--background-color);
    border-radius: var(--radius);
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
}

.modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--secondary-color);
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-close:hover {
    color: var(--text-color);
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
}

/* Responsive */
@media (max-width: 768px) {
    .app-layout {
        grid-template-columns: 1fr;
    }
    
    .nav-menu {
        gap: 1rem;
    }
    
    .container {
        padding: 0 0.5rem;
    }
}`;

  // Add component-specific CSS
  css += generateFormComponentsCSS(config, config.cssFramework);
  css += generateBusinessComponentsCSS(config, config.cssFramework);
  css += generateUIComponentsCSS(config, config.cssFramework);

  return css;
}

function generateJavaScript(config: ProjectConfig): string {
  let js = `/* Generated by Agent Template */
(function() {
    'use strict';
    
    // Application configuration
    const AppConfig = {
        name: "${config.name || 'Mon Mini-Outil'}",
        cssFramework: "${config.cssFramework}",
        features: {
            formComponents: ${JSON.stringify(config.formComponents, null, 12)},
            businessComponents: ${JSON.stringify(config.businessComponents, null, 12)},
            uiComponents: ${JSON.stringify(config.uiComponents, null, 12)},
            business: ${JSON.stringify(config.business, null, 12)}
        }
    };
    
    // Application state
    const AppState = {
        currentView: 'home',
        data: {},
        components: {}
    };
    
    // Utility functions
    const Utils = {
        // DOM helpers
        $(selector) {
            return document.querySelector(selector);
        },
        
        $$(selector) {
            return document.querySelectorAll(selector);
        },
        
        // Event helpers
        on(element, event, handler) {
            if (typeof element === 'string') {
                element = this.$(element);
            }
            if (element) {
                element.addEventListener(event, handler);
            }
        },
        
        // Storage helpers
        storage: {
            get(key) {
                try {
                    return JSON.parse(localStorage.getItem(key));
                } catch {
                    return null;
                }
            },
            
            set(key, value) {
                try {
                    localStorage.setItem(key, JSON.stringify(value));
                    return true;
                } catch {
                    return false;
                }
            },
            
            remove(key) {
                localStorage.removeItem(key);
            }
        },
        
        // Export helpers
        exportCSV(data, filename) {
            const csv = this.arrayToCSV(data);
            this.downloadFile(csv, filename + '.csv', 'text/csv');
        },
        
        exportJSON(data, filename) {
            const json = JSON.stringify(data, null, 2);
            this.downloadFile(json, filename + '.json', 'application/json');
        },
        
        arrayToCSV(data) {
            if (!data || !data.length) return '';
            
            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => 
                    headers.map(header => 
                        JSON.stringify(row[header] || '')
                    ).join(',')
                )
            ].join('\\n');
            
            return csvContent;
        },
        
        downloadFile(content, filename, type) {
            const blob = new Blob([content], { type });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        },
        
        // Format helpers
        formatCurrency(amount, currency = 'EUR') {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: currency
            }).format(amount);
        },
        
        formatDate(date) {
            return new Intl.DateTimeFormat('fr-FR').format(new Date(date));
        }
    };`;

  // Add business logic templates
  const businessLogic = getBusinessLogicTemplates(config);
  js += businessLogic;

  // Add component-specific JavaScript
  js += generateFormComponentsJS(config);
  js += generateBusinessComponentsJS(config);
  js += generateUIComponentsJS(config);

  // Add component initialization
  js += `
    
    // Component initialization
    function initComponents() {`;

  if (Object.values(config.formComponents).some(Boolean)) {
    js += `
        initFormComponents();`;
  }

  if (Object.values(config.businessComponents).some(Boolean)) {
    js += `
        initBusinessComponents();`;
  }

  if (Object.values(config.uiComponents).some(Boolean)) {
    js += `
        initUIComponents();`;
  }

  js += `
    }
    
    // Navigation handling
    function initNavigation() {
        Utils.$$('.nav-link').forEach(link => {
            Utils.on(link, 'click', function(e) {
                e.preventDefault();
                
                // Update active state
                Utils.$$('.nav-link').forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // Update view
                const target = this.getAttribute('href').substring(1);
                AppState.currentView = target;
                
                console.log('Navigation to:', target);
            });
        });
    }
    
    // Application initialization
    function init() {
        console.log('${config.name || 'Mini-Outil'} initialized');
        console.log('Configuration:', AppConfig);
        
        initNavigation();
        initComponents();
        
        // Load saved data if localStorage is enabled
        ${config.business.localStorage ? `
        const savedData = Utils.storage.get('appData');
        if (savedData) {
            AppState.data = savedData;
            console.log('Loaded saved data:', savedData);
        }` : ''}
    }
    
    // Auto-save data if localStorage is enabled
    ${config.business.localStorage ? `
    function saveData() {
        Utils.storage.set('appData', AppState.data);
    }
    
    // Save data every 30 seconds
    setInterval(saveData, 30000);
    
    // Save data on page unload
    window.addEventListener('beforeunload', saveData);` : ''}
    
    // Start application when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    // Expose globals for development and component interaction
    window.AppUtils = Utils;
    window.AppState = AppState;
    window.AppConfig = AppConfig;
})();`;

  return js;
}

function generateREADME(config: ProjectConfig): string {
  const formComponents = Object.entries(config.formComponents).filter(([_, enabled]) => enabled);
  const businessComponents = Object.entries(config.businessComponents).filter(([_, enabled]) => enabled);
  const uiComponents = Object.entries(config.uiComponents).filter(([_, enabled]) => enabled);
  const businessLogic = Object.entries(config.business).filter(([_, enabled]) => enabled);
  
  return `# ${config.name || 'Mon Mini-Outil'}

${config.description || 'Application web générée par Agent Template'}

## Description

Ce projet a été généré automatiquement par **Agent Template v2.0**, un générateur de structure HTML/CSS/JS vanilla avec injection modulaire de composants.

${config.author ? `**Auteur:** ${config.author}` : ''}

## Configuration

- **Framework CSS:** ${config.cssFramework === 'none' ? 'Vanilla CSS' : config.cssFramework === 'bulma' ? 'Bulma CSS' : 'Pico.css'}
- **Composants total:** ${formComponents.length + businessComponents.length + uiComponents.length}
- **Logiques métier:** ${businessLogic.length}

## Structure du projet

- \`index.html\` - Structure HTML avec CDN inclus
- \`style.css\` - Styles CSS avec variables personnalisées
- \`script.js\` - Logique JavaScript modulaire
- \`README.md\` - Ce fichier de documentation

## Fonctionnalités

### Structure HTML
${Object.entries(config.structure).filter(([_, enabled]) => enabled).map(([key, _]) => `- ${key.charAt(0).toUpperCase() + key.slice(1)}`).join('\n') || '- Structure minimale'}

### Composants de formulaire
${formComponents.length > 0 ? formComponents.map(([key, _]) => {
  const descriptions = {
    textInput: 'Champ texte avec validation',
    emailInput: 'Email avec format validation',
    phoneInput: 'Téléphone avec masque français',
    textarea: 'Zone de texte multiligne',
    select: 'Liste déroulante',
    radio: 'Boutons radio exclusifs',
    checkbox: 'Cases à cocher multiples',
    dateInput: 'Sélecteur de date',
    buttons: 'Boutons d\'action (submit, reset, save, delete)'
  };
  return `- ${descriptions[key as keyof typeof descriptions] || key}`;
}).join('\n') : '- Aucun composant de formulaire'}

### Composants métier
${businessComponents.length > 0 ? businessComponents.map(([key, _]) => {
  const descriptions = {
    vatCalculator: 'Calculateur TVA HT/TTC avec historique',
    priceSimulator: 'Simulateur de prix avec remises',
    filterableTable: 'Table avec tri, filtre, pagination',
    csvExport: 'Export CSV/JSON/Excel/PDF'
  };
  return `- ${descriptions[key as keyof typeof descriptions] || key}`;
}).join('\n') : '- Aucun composant métier'}

### Composants UI
${uiComponents.length > 0 ? uiComponents.map(([key, _]) => {
  const descriptions = {
    searchZone: 'Zone de recherche avec filtres',
    notifications: 'Système de notifications toast',
    progressBar: 'Barres de progression animées',
    badges: 'Badges dynamiques avec compteurs',
    copyButton: 'Boutons de copie presse-papiers',
    counter: 'Compteurs et chronomètres',
    fileUpload: 'Upload par glisser-déposer',
    conditionalDisplay: 'Affichage conditionnel',
    jsonDisplay: 'Affichage JSON formaté',
    pagination: 'Navigation entre pages',
    modal: 'Fenêtres modales réutilisables',
    richEditor: 'Éditeur de texte enrichi'
  };
  return `- ${descriptions[key as keyof typeof descriptions] || key}`;
}).join('\n') : '- Aucun composant UI'}

### Logiques métier
${businessLogic.length > 0 ? businessLogic.map(([key, _]) => {
  const descriptions = {
    vat: 'Calculs TVA HT/TTC avancés',
    conversions: 'Conversions d\'unités et devises',
    export: 'Export de données multi-format',
    localStorage: 'Sauvegarde locale automatique'
  };
  return `- ${descriptions[key as keyof typeof descriptions] || key}`;
}).join('\n') : '- Aucune logique métier'}

## Utilisation

1. Ouvrez \`index.html\` dans votre navigateur
2. Toutes les dépendances sont chargées via CDN
3. Fonctionne hors ligne après premier chargement

## Développement

### Technologies utilisées
- **HTML5** - Structure sémantique
- **CSS3** - Variables personnalisées, Grid, Flexbox
- **JavaScript ES6+** - Modules, classes, async/await
${config.cssFramework !== 'none' ? `- **${config.cssFramework === 'bulma' ? 'Bulma CSS' : 'Pico.css'}** - Framework CSS` : ''}
- **Font Awesome** - Icônes

### Variables CSS personnalisables

Modifiez les couleurs dans \`:root\` (\`style.css\`) :
\`\`\`css
:root {
    --primary-color: hsl(207, 90%, 54%);
    --secondary-color: hsl(25, 5.3%, 44.7%);
    --background-color: hsl(0, 0%, 100%);
    --surface-color: hsl(60, 4.8%, 95.9%);
    --text-color: hsl(20, 14.3%, 4.1%);
    --border-color: hsl(20, 5.9%, 90%);
    --destructive: hsl(0, 84.2%, 60.2%);
}
\`\`\`

### API JavaScript

Objets globaux disponibles :
- \`AppUtils\` - Utilitaires DOM, stockage, export, formatage
- \`AppState\` - État de l'application
- \`AppConfig\` - Configuration du projet

Exemple d'utilisation :
\`\`\`javascript
// Afficher une notification
showNotification('Message', 'success');

// Exporter des données
AppUtils.exportCSV(data, 'filename');

// Stocker des données
AppUtils.storage.set('key', value);
\`\`\`

## Compatibilité

- **Navigateurs:** Chrome 80+, Firefox 75+, Safari 13+, Edge 80+
- **Mobile:** Responsive design adaptatif
- **Accessibilité:** Conforme WCAG 2.1 AA
- **Offline:** Fonctionne hors ligne après chargement initial

## Structure des données

L'application utilise \`AppState.data\` pour stocker :
- \`formData\` - Données des formulaires
- \`tableData\` - Données des tables
- \`customExportData\` - Données personnalisées
${config.business.localStorage ? '- Sauvegarde automatique dans localStorage' : ''}

## Déploiement

1. **Statique:** Hébergez les fichiers sur tout serveur web
2. **GitHub Pages:** Push dans un repo GitHub avec Pages activé
3. **Netlify/Vercel:** Déployez directement depuis le ZIP
4. **Local:** Double-clic sur \`index.html\`

---

**Généré par Agent Template v2.0** - ${new Date().toLocaleDateString('fr-FR')}  
*Générateur de mini-outils HTML/CSS/JS avec injection modulaire*
`;
}
